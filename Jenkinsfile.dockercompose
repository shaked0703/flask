def connectToServer(String ipAddress) {
    script {
        withCredentials([sshUserPrivateKey(credentialsId: 'aws-key-ssh', keyFileVariable: 'KEY_FILE')]) {
            sshagent(['aws-key-ssh']) {
                sh """ 
                ssh -o StrictHostKeyChecking=no -i $KEY_FILE ec2-user@$ipAddress '
                sudo yum install docker -y
                sudo systemctl restart docker
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                sudo yum install python3-pip -y
                pip install mysql-connector-python
                sudo docker-compose -f /home/ec2-user/flask/docker-compose.yml up --build -d
                '
                """
            }
        }
    }
}
pipeline {
    agent any
    
     environment {
        EC2_IP_TEST = "13.53.197.239"
        EC2_IP_PROD = "16.170.244.64"
    }

    stages {
        stage('Clean Up') {
            steps {
                // Clean Up Project Files And Clone Git - To Update The Project
                sh 'rm -rf *'
                sh 'git clone https://github.com/shaked0703/flask.git'
                //Deletes Previous Docker Images
                sh 'docker rmi -f shaked0703/flask2:latest'
            }
        }

        stage('Build And Push The Image To Docker Hub') {
            steps {
                    //Creates Docker Image
                    dir('flask'){
                    sh 'docker build -t shaked0703/flask2:2.${BUILD_NUMBER} -t shaked0703/flask2:latest .'
                    }
                    //Pushes Docker Image To Docker Hub
                    sh 'docker push shaked0703/flask2:2.${BUILD_NUMBER}'
                    sh 'docker push shaked0703/flask2:latest'

                    // Cleanup old Docker images
                    sh "docker image ls --format '{{.ID}}' shaked0703/flask2 --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}"            
            }
        }

        stage('check for the connection'){
            steps {
                sh 'ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/shaked.pem ec2-user@$EC2_IP_TEST'
                sh 'ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/shaked.pem ec2-user@$EC2_IP_PROD'

            }
        }

        stage('Running Docker On Test Server') {
            steps {
                sh 'scp -o StrictHostKeyChecking=no -i /var/lib/jenkins/key.pem -r DevOps-Crypto ec2-user@$EC2_IP_TEST:/home/ec2-user'
                connectToServer(EC2_IP_TEST)
                // Runs tests from the main machine on the website
                sh 'chmod +x flask/tests.sh'
                sh './flask/tests.sh'
            }
        }

        stage('Running Docker On Prod Server') {
            steps {
                sh 'scp -o StrictHostKeyChecking=no -i /var/lib/jenkins/key.pem -r DevOps-Crypto ec2-user@$EC2_IP_PROD:/home/ec2-user'
                connectToServer(EC2_IP_PROD)
            }
        }
    }
}
