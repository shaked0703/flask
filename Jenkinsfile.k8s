pipeline {
    agent any
    stages {
        stage('Clean Up') {
            steps {
                sh 'rm -rf *' // Clean up project files
                sh 'git clone https://github.com/shaked0703/flask.git' // Clone Git repository to update the project
                sh 'docker rmi -f shaked0703/docflask2:latest' // Delete previous Docker images
            }
        }
        stage('Build And Push The Image To Docker Hub') {
            steps {
                dir('flask') {
                    sh "docker build -t shaked0703/docflask2:1.${BUILD_NUMBER} -t shaked0703/docflask2:latest ." // Create Docker image
                }
                sh "docker push shaked0703/docflask2:1.${BUILD_NUMBER}" // Push Docker image to Docker Hub
                sh 'docker push shaked0703/docflask2:latest'
                sh "docker image ls --format '{{.ID}}' shaked0703/docflask2 --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}" // Cleanup old Docker images
            }
        }
        stage('Running Docker On Test Cluster') {
            steps {
                sh "kubectl config use-context gke_wide-link-393311_us-central1_autopilot-cluster-1"
                dir('flask') {
                    sh "chmod +x deploy_script.sh"
                    sh "./deploy_script.sh"
                    sh "sleep 30"
                    sh "curl -s 107.178.210.254:80"
                }
                sh "kubectl set image deployment/flask-app-deployment flask-app-container=shaked0703/docflask2:1.${BUILD_NUMBER}"
            }
        }
        stage('Ask for Deployment Confirmation') {
            steps {
                script {
                    def user_input = input(
                        id: 'deploy_confirmation',
                        message: 'Do you want to continue to the deploy stage?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', name: 'CONTINUE_DEPLOY', defaultValue: false, description: 'Check to continue the deployment.']
                        ]
                    )
                    if (user_input.CONTINUE_DEPLOY) {
                        echo 'Continuing to the deploy stage.'
                    } else {
                        echo 'Deployment stage skipped.'
                        currentBuild.result = 'SUCCESS'
                        error('Deployment stage skipped.')
                    }
                }
            }
        }
        stage('Running Docker On Prod Cluster 2') {
            steps {
                sh "kubectl config use-context gke_wide-link-393311_us-central1_autopilot-cluster-2"
                dir('flask') {
                    sh "chmod +x deploy_script.sh"
                    sh "./deploy_script.sh"
                }
                sh "kubectl set image deployment/flask-app-deployment flask-app-container=shaked0703/docflask2:1.${BUILD_NUMBER}"
            }
        }
    }
}
