def deployKubernetesResources() {
    dir('DevOps-Crypto') {
        sh 'helm repo update'
        // Checks the status of the helm repo to see if its installed or not
        sh 'chmod +x scripts/helm-status.sh'
        sh 'bash scripts/helm-status.sh'
        // Checks everything is up before moving on
        sh 'chmod +x scripts/Gcloud-status.sh'
        sh 'bash scripts/Gcloud-status.sh'
    }
}
def runKubernetesTests() {
    // Gets the test cluster ip and runs test
    sh 'chmod +x DevOps-Crypto/scripts/k8s-tests.sh'
    sh 'bash DevOps-Crypto/scripts/k8s-tests.sh'
}
def getClusterIP() {
    // Gets the prod cluster ip and showes it at the end of the pipeline
    sh 'chmod +x DevOps-Crypto/scripts/Load-Balancer-IP.sh'
    sh 'bash DevOps-Crypto/scripts/Load-Balancer-IP.sh'
}
pipeline {
    agent any
    stages {
        stage('Clonnig Git Repo And Cleaning Workspace And GCP Bucket') {
            steps {
                // Clean Up Project Files And Clone Git - To Update The Project
                sh 'rm -rf *'
                sh 'git clone https://github.com/shaked0703/flask.git'
                // Clean Up The GCP Bucket
                sh 'chmod +x flask/scripts/bucket-clean.sh'
                sh './flask/scripts/bucket-clean.sh'
            }
        }
        stage('Build And Push The Image To Docker Hub, Package And Upload Helm To GCP Bucket') {
            steps {
                    // Creates Docker Image
                    dir('flask'){
                    sh 'docker build -t shaked0703/flask2:5.${BUILD_NUMBER} -t shaked0703/flask2:latest'
                    }
                    // Pushes Docker Image To Docker Hub - creates a image with a build number and latest
                    sh 'docker push shaked0703/flask2:5.${BUILD_NUMBER}'
                    sh 'docker push shaked0703/flask2:latest'
                    // Cleanup Docker images
                    sh 'docker rmi shaked0703/flask2:5.${BUILD_NUMBER} shaked0703/flask2:latest'
                    // Mange Helm Zip File Version, Packages It And Upload To GCP And Cleans The File From VM
                    sh "chmod +x flask/scripts/helm-versions.sh"
                    sh "./flask/scripts/helm-versions.sh"
                    sh "helm package flask/flask-app"
                    sh "gsutil cp flask-app-0.1.${BUILD_NUMBER}.tgz gs://shaked/"
                    sh "rm flask-app-0.1.${BUILD_NUMBER}.tgz"
            }
        }
        stage('Running K8S On GCloud Test Cluster') {
            steps {
                // Switches to the test cluster
                sh 'kubectl config use-context gke_wide-link-393311_us-central1_autopilot-cluster-1'
                script {
                    // Starts the cluster
                    deployKubernetesResources()
                     catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        runKubernetesTests()
                    }
                }
            }
        }
        stage('Running K8S On GCloud Prod Cluster') {
            steps {
                // Switch to the prod cluster
                sh 'kubectl config use-context gke_wide-link-393311_us-central1_autopilot-cluster-2'
                deployKubernetesResources()
                getClusterIP()
            }
        }
    }
}
